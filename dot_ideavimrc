" LazyVim key mappings for Jetbrains IDEs.

let mapleader=" "
let maplocalleader="\"

" Confirm to save changes before exiting modified buffer
set formatoptions=jcroqlnt
set number
set relativenumber
set scrolloff=4
set shiftround
set sidescrolloff=8
set timeoutlen=800
set notimeout
set which-key
set undolevels=10000
set nowrap
set wrapscan
set clipboard+=unnamedplus
set hlsearch
set incsearch
set ignorecase
set smartcase

" Neovim settings that differ from Vim
" https://neovim.io/doc/user/diff.html
" https://github.com/mikeslattery/nvim-defaults.vim/blob/main/plugin/.vimrc

set backspace=indent,eol,start
set listchars=tab:>\ ,trail:-,nbsp:+
set shortmess=filnxtToOF

" Enable plugin behavior
" https://github.com/JetBrains/ideavim/wiki/IdeaVim-Plugins
" https://www.lazyvim.org/plugins

Plug 'tpope/vim-commentary'
Plug 'tpope/vim-surround'

" General Keymaps
nnoremap Y y$
nnoremap Q @@

" Go to Left Window
nmap <C-h> <C-w>h
" Go to Lower Window
nmap <C-j> <C-w>j
" Go to Upper Window
nmap <C-k> <C-w>k
" Go to Right Window
nmap <C-l> <C-w>l
" Prev Buffer
nmap <S-h> <Action>(PreviousTab)
" Next Buffer
nmap <S-l> <Action>(NextTab)
" Delete Buffer
nmap <leader>bd <Action>(CloseContent)
" Delete Buffer and Window
nmap <leader>bD <Action>(CloseContent)
" Delete Other Buffers
nmap <leader>bo <Action>(CloseAllEditorsButActive)
" Escape and Clear hlsearch
nmap <esc> :nohlsearch<CR>
nmap <leader>ur :nohlsearch<CR>
" Add Comment Below
nmap gco o<c-o>gcc
" Add Comment Above
nmap gcO O<c-o>gcc
" Lazy
nmap <leader>l <Action>(WelcomeScreen.Plugins)
" New File
nmap <leader>fn <Action>(NewElementSamePlace)
" Location List
nmap <leader>xl <Action>(ActivateProblemsViewToolWindow)
" Quickfix List
nmap <leader>xq <Action>(ActivateProblemsViewToolWindow)
" Format
nmap <leader>cf <Action>(ReformatCode)
nmap <leader>gq <Action>(HideActiveWindow)
vmap <leader>cf <Action>(Format)
" Line Diagnostics
nmap <leader>cd <Action>(ActivateProblemsViewToolWindow)
" Toggle Auto Format (Global)
nmap <leader>ub :echo 'There is no equivalent mapping for Toggle Auto Format.'<cr>
" Toggle Auto Format (Buffer)
nmap <leader>uB :echo 'There is no equivalent mapping for Toggle Auto Format.'<cr>
" Toggle Spelling
nmap <leader>us :setlocal spell!<CR>
" Toggle Wrap
nmap <leader>uw :setlocal wrap!<CR>
" Toggle Relative Number
nmap <leader>uL :set relativenumber!<CR>
" Toggle Diagnostics
nmap <leader>ud <Action>(ActivateProblemsViewToolWindow)
" Toggle Line Numbers
nmap <leader>ul :set number!<CR>
" Toggle conceallevel
nmap <leader>uc :echo 'There is no equivalent mapping for Toggle Conceallevel.'<cr>
" Toggle Treesitter Highlight
nmap <leader>uT :echo 'There is no equivalent mapping for Toggle Treesitter Highlight.'<cr>
" Toggle Background
nmap <leader>ub <Action>(QuickChangeScheme)
" Toggle Inlay Hints
nmap <leader>uh <Action>(ToggleInlayHintsGloballyAction)

" Quit All
nmap <leader>qq <Action>(Exit)
" Inspect Pos
nmap <leader>ui <Action>(ActivateStructureToolWindow)
" Inspect Tree
nmap <leader>uI <Action>(ActivateStructureToolWindow)
" LazyVim Changelog
nmap <leader>L <Action>(WhatsNewAction)
" Terminal (Root Dir)
nmap <leader>ft <Action>(ActivateTerminalToolWindow)
" Terminal (cwd)
nmap <leader>fT <Action>(ActivateTerminalToolWindow)
" Terminal (Root Dir)
nmap <C-/> <Action>(ActivateTerminalToolWindow)
" nmap <C-_> 'There is no equivalent mapping for <c-_>.'<cr>
" Hide Terminal - terminal Mode maps not possible

" Last Tab
nmap <leader><tab>l <Action>(StoreDefaultLayout)<Action>(ChangeToolWindowLayout)
" Close Other Tabs
nmap <leader><tab>o :<cr>
" First Tab
nmap <leader><tab>f <Action>(StoreDefaultLayout)<Action>(ChangeToolWindowLayout)
" New Tab
nmap <leader><tab>f <Action>(StoreDefaultLayout)<Action>(StoreNewLayout)
" Next Tab
nmap <leader><tab>] <Action>(StoreDefaultLayout)<Action>(ChangeToolWindowLayout)
" Previous Tab
nmap <leader><tab>[ <Action>(StoreDefaultLayout)<Action>(ChangeToolWindowLayout)
" Close Tab
nmap <leader><tab>f <Action>(StoreDefaultLayout)<Action>(ChangeToolWindowLayout)

" LSP Keymaps

" Lsp Info
nmap <leader>cc :echo 'There is no equivalent mapping for Lsp Info.'<cr>
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Goto Definition
nmap gd <Action>(GotoDeclaration)
" References
nmap gr <Action>(FindUsages)
" Goto Implementation
nmap gI <Action>(GotoImplementation)
" Goto Type Definition
nmap gy <Action>(GotoTypeDeclaration)
" Goto Declaration
nmap gD <Action>(GotoDeclaration)
" Signature Help
nmap gK <Action>(ParameterInfo)
" Signature Help in Insert Mode
imap <C-k> <C-o><Action>(ParameterInfo)
" Code Action
nmap <leader>ca <Action>(RefactoringMenu)
vmap <leader>ca <Action>(RefactoringMenu)
" Run Codelens
nmap <leader>cc :echo 'There is no equivalent mapping for Run Codelens.'<cr>
" Refresh & Display Codelens
nmap <Leader>cC :echo 'There is no equivalent mapping for Refresh & Display Codelens.'<cr>
" Rename File
nmap <leader>cR <Action>(RenameFile)
" Rename
nmap <leader>cr <Action>(RenameElement)
" Source Action
nmap <leader>cA <Action>(ShowIntentionActions)
" Next Reference
nmap ]] <Action>(GotoNextError)
" Prev Reference
nmap [[ <Action>(GotoPreviousError)

" Delete buffers
nmap <leader>bl <Action>(CloseAllToTheLeft)
nmap <leader>bp <Action>(PinActiveTabToggle)
nmap <leader>bP <Action>(CloseAllUnpinnedEditors)
nmap <leader>br <Action>(CloseAllToTheRight)

" Neo-tree Keymaps

" Buffer Explorer
nmap <leader>be <Action>(ActivateProjectToolWindow)
" Öffnet oder fokussiert den Project View
nmap <leader>e <Action>(ActivateProjectToolWindow)
" Blendet den aktuell offenen Tool View aus (z. B. Project, Terminal, Commit)
nmap <leader>ha <Action>(HideAllWindows)
" Springt im Project View zu der Datei, die im Editor aktiv ist
nmap <leader>pe <Action>(SelectInProjectView)
" Öffnet die Git/VCS Ansicht (geht nur, wenn Git aktiviert ist)
nmap <leader>ge <Action>(ActivateVersionControlToolWindow)

" Notifications (noice, snacks)

nmap <leader>snd <Action>(ClearAllNotifications)
nmap <leader>un <Action>(ClearAllNotifications)

" Telescope Keymaps

" Find Files (Root Dir)
nmap <leader><space> <Action>(GotoFile)
" Switch Buffer
nmap <leader>, <Action>(Switcher)
" Grep (Root Dir)
nmap <leader>/ <Action>(FindInPath)
" Command History
nmap <leader>: :history<cr>
" Buffers
nmap <leader>fb <Action>(Switcher)
" Find Files (Root Dir) (alternative)
nmap <leader>ff <Action>(GotoFile)
" Find Files (cwd)
nmap <leader>fg <Action>(GotoFile)
" Recent
nmap <leader>fr <Action>(RecentFiles)
" Registers
nmap <leader>s" :registers<cr>
" Auto Commands
nmap <leader>sa :echo 'There is no equivalent mapping.'<cr>
" Buffer
nmap <leader>sb <Action>(Switcher)
" Command History (alternative)
nmap <leader>sc :history<cr>
" Commands
nmap <leader>sC <Action>(GotoAction)
" Document Diagnostics
nmap <leader>sd <Action>(ActivateProblemsViewToolWindow)
" Workspace Diagnostics
nmap <leader>sD <Action>(ActivateProblemsViewToolWindow)
" Grep (Root Dir) (alternative)
nmap <leader>sg <Action>(FindInPath)
" Grep (cwd)
nmap <leader>sG <Action>(FindInPath)
" Help Pages
nmap <leader>sh <Action>(HelpTopics)
" Search Highlight Groups
" Jumplist
nmap <leader>sj <Action>(RecentLocations)
" Key Maps
nmap <leader>sk :map<cr>
" Location List
nmap <leader>sl <Action>(ActivateProblemsViewToolWindow)
" Jump to Mark
nmap <leader>sm :marks<cr>
" Man Pages
nmap <leader>sM <Action>(ShowDocumentation)
" Options
nmap <leader>so <Action>(ShowSettings)
" Quickfix List
nmap <leader>sq <Action>(ActivateProblemsViewToolWindow)
" Resume
nmap <leader>sR :echo 'Not yet implmented.'<cr>
" Goto Symbol
nmap <leader>ss <Action>(GotoSymbol)
" Word (Root Dir)
nmap <leader>sw <Action>(FindWordAtCaret)
" Selection (cwd)
nmap <leader>sH <Action>(HighlightUsagesInFile)
" Colorscheme with Preview
nmap <leader>uC <Action>(QuickChangeScheme)


" DAP Keymaps

" Run with Args
nmap <leader>da <Action>(ChooseRunConfiguration)
" Toggle Breakpoint
nmap <leader>db <Action>(ToggleLineBreakpoint)
" Breakpoint Condition
nmap <leader>dB <Action>(AddConditionalBreakpoint)
" Continue
nmap <leader>dc <Action>(Resume)
" Run to Cursor
nmap <leader>dC <Action>(ForceRunToCursor)
" Go to Line (No Execute)
nmap <leader>dg :echo 'Not yet implemented.'<cr>
" Step Into
nmap <leader>di <Action>(StepInto)
" Down
nmap <leader>dj <Action>(GotoNextError)
nmap <a-n> <Action>(GotoNextError)
" Up
" Prev Reference (alternative)
nmap <leader>dk <Action>(GotoPreviousError)
nmap <a-p> <Action>(GotoPreviousError)

" Run Last
nmap <leader>dl <Action>(Debug)
" Step Out
nmap <leader>do <Action>(StepOut)
" Step Over
nmap <leader>dO <Action>(StepOver)
" Pause
nmap <leader>dp <Action>(Pause)
" Toggle REPL
nmap <leader>dr <Action>(JShell.Console)
" Session
nmap <leader>ds :echo 'Not yet implmented.'<cr>
" Terminate
nmap <leader>dt <Action>(Stop)
" Widgets
nmap <leader>dw :echo 'There is no equivalent mapping for Widgets.'<cr>

" Todo-comments Keymaps
s
" Todo
nmap <leader>st oTODO<esc>gcc
" Todo/Fix/Fixme
nmap <leader>sT :echo 'Not yet implemented.'<cr>
" Todo (Trouble)
nmap <leader>xt :echo 'Not yet implemented.'<cr>
" Todo/Fix/Fixme (Trouble)
nmap <leader>xT :echo 'Notyet implemented.'<cr>
" Eval
nmap <leader>de <Action>(EvaluateExpression)
vmap <leader>de <Action>(EvaluateExpression)
" Dap UI
nmap <leader>du <Action>(ActivateDebugToolWindow)

" Run Last
nmap <leader>tl <Action>(Run)
" Show Output
nmap <leader>to :echo 'Not yet implemented.'<cr>
" Toggle Output Panel
nmap <leader>tO :echo 'Not yet implemented.'<cr>
" Run Nearest
nmap <leader>tr <Action>(RunClass)
" Toggle Summary
nmap <leader>ts <Action>(ShowTestSummary)
" Stop
nmap <leader>tS <Action>(Stop)
" Run File
nmap <leader>tt <Action>(RunClass)
" Run All Test Files
nmap <leader>tT <Action>(RunAllTests)
" Toggle Watch
nmap <leader>tw <Action>(ToggleTestWatch)

" nvim-dap
" Debug Nearest
nmap <leader>td <Action>(ChooseDebugConfiguration)

" Neovim mappings
" https://neovim.io/doc/user/vim_diff.html#_default-mappings

inoremap <C-U> <C-G>u<C-U>
inoremap <C-W> <C-G>u<C-W>
"----------------------------------------------------
" Custom Keybindings
"----------------------------------------------------
" There are several more Neovim mappings that need to be ported.
noremap <leader>vt :echo "Leader key works!!!"<CR>
noremap <leader>vv :source ~/.ideavimrc<cr>:echo "file reloaded"<cr>

" Back / Forward
nmap <C-o> <Action>(Back)
nmap <C-i> <Action>(Forward)
map <leader>fa <action>(GotoAction)
map gm :action FileStructurePopup<CR>
map <leader>gm :action FileStructurePopup<CR>
vnoremap J :m '>+1<CR>gv=gv
vnoremap K :m '<-2<CR>gv=gv

map <leader>oi :action OptimizeImports<CR>
map <leader>pv :action SelectInProjectView<CR>
"map <leader>/ :action CommentByBlockComment<CR>
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Mappings - General Navigation
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Escape mappings
inoremap jk <Esc>
imap jj <Esc>
nmap <leader>dv <Action>(ActivateDatabaseToolWindow)
xnoremap <leader>p "_d
vmap <leader>cw <Action>(SurroundWith)
nnoremap <leader>ya ggVGy
nnoremap <leader>yp vap"+y
" Ganze Funktion (Zeilen von { bis }) kopieren
nnoremap <leader>yf [{V%y
" Ganze Funktion ausschneiden
nnoremap <leader>df [{V%d
" Ganze Funktion formatieren (wenn du gq nutzt)
nnoremap <leader>= [{V%gq

" Window splits
map <leader>ww <Action>(Unsplit)
nnoremap <leader>- :split<CR>
nnoremap <leader>wh :split<CR>
nnoremap <leader>\ :vsplit<CR>
nnoremap <leader>wv :vsplit<CR>
nnoremap <leader>wp :action MoveEditorToOppositeTabGroup<cr>
nnoremap <leader>we :action EditSourceInNewWindow<cr>
nmap <leader>wm <Action>(ToggleDistractionFreeMode)

" Git
nmap <leader>gb <Action>(Git.Branches)
nmap <leader>gd <Action>(Compare.LastVersion)
nmap <leader>gD <Action>(Compare.Selected)
nmap <leader>gc <Action>(CheckinProject)
nmap <leader>gf <Action>(Vcs.ShowTabbedFileHistory)
nmap <Leader>gF <Action>(Git.Fetch)
nmap <leader>gg <Action>(Git.ContextMenu)
nmap <leader>gl <Action>(Vcs.Show.Log)
nmap <Leader>go <Action>(GitCheckoutFromInputAction)
nmap <Leader>gp <Action>(Vcs.UpdateProject)   " Pull
nmap <Leader>gP <Action>(Vcs.Push)
nmap <leader>gw <Action>(ActivateCommitToolWindow)
" Code stuff
nmap <leader>in :action Inline<CR>
vmap <leader>in :action Inline<CR>
nmap <leader>cg :action Generate<CR>

" Methode springen (komfortabel für QWERTZ)
nmap <leader>mn <Action>(MethodDown)
nmap <leader>mp <Action>(MethodUp)
nmap <leader>mf <Action>(FileStructurePopup)
" Matchit-Ersatz für IdeaVim
nmap % <Action>(EditorMatchBrace)
nmap <leader>% <Action>(EditorSelectMatchingElement)

"----------------------------------------------------
" Which-key descriptions
"----------------------------------------------------
let g:WhichKeyDesc_space = "<Space> Find"
let g:WhichKeyDesc_comma = "<Space>, Buffers"
let g:WhichKeyDesc_slash = "<Space>/ Grep"
let g:WhichKeyDesc_colon = "<Space>: History"

let g:WhichKeyDesc_b = "<Space>b Buffer"
let g:WhichKeyDesc_bd = "<Space>bd Delete"
let g:WhichKeyDesc_bD = "<Space>bD Delete & Close"
let g:WhichKeyDesc_bl = "<Space>bl Close Left"
let g:WhichKeyDesc_bo = "<Space>bo Close Others"
let g:WhichKeyDesc_bp = "<Space>bp Pin"
let g:WhichKeyDesc_bP = "<Space>bP Close Unpinned"
let g:WhichKeyDesc_br = "<Space>br Close Right"
let g:WhichKeyDesc_be = "<Space>be Explorer"

let g:WhichKeyDesc_c = "<Space>c Code"
let g:WhichKeyDesc_ca = "<Space>ca Action"
let g:WhichKeyDesc_cA = "<Space>cA Source Action"
let g:WhichKeyDesc_cd = "<Space>cd Diagnostics"
let g:WhichKeyDesc_cf = "<Space>cf Format"
let g:WhichKeyDesc_cg = "<Space>cg Generate"
let g:WhichKeyDesc_cr = "<Space>cr Rename"
let g:WhichKeyDesc_cR = "<Space>cR Rename File"
let g:WhichKeyDesc_cw = "<Space>cw Surround With"

let g:WhichKeyDesc_d = "<Space>d Debug"
let g:WhichKeyDesc_da = "<Space>da Run with Args"
let g:WhichKeyDesc_db = "<Space>db Toggle Breakpoint"
let g:WhichKeyDesc_dB = "<Space>dB Conditional Breakpoint"
let g:WhichKeyDesc_dc = "<Space>dc Continue"
let g:WhichKeyDesc_dC = "<Space>dC Run to Cursor"
let g:WhichKeyDesc_de = "<Space>de Evaluate"
let g:WhichKeyDesc_di = "<Space>di Step Into"
let g:WhichKeyDesc_dj = "<Space>dj Next Error"
let g:WhichKeyDesc_dk = "<Space>dk Prev Error"
let g:WhichKeyDesc_dl = "<Space>dl Run Last"
let g:WhichKeyDesc_do = "<Space>do Step Out"
let g:WhichKeyDesc_dO = "<Space>dO Step Over"
let g:WhichKeyDesc_dp = "<Space>dp Pause"
let g:WhichKeyDesc_dr = "<Space>dr REPL"
let g:WhichKeyDesc_ds = "<Space>ds Session"
let g:WhichKeyDesc_dt = "<Space>dt Terminate"
let g:WhichKeyDesc_du = "<Space>du UI"
let g:WhichKeyDesc_dv = "<Space>dv Database"
let g:WhichKeyDesc_dw = "<Space>dw Widgets"

let g:WhichKeyDesc_e = "<Space>e Explorer"

let g:WhichKeyDesc_f = "<Space>f File/Find"
let g:WhichKeyDesc_fa = "<Space>fa Goto Action"
let g:WhichKeyDesc_fb = "<Space>fb Buffers"
let g:WhichKeyDesc_ff = "<Space>ff Find File"
let g:WhichKeyDesc_fg = "<Space>fg Find File (cwd)"
let g:WhichKeyDesc_fn = "<Space>fn New File"
let g:WhichKeyDesc_fr = "<Space>fr Recent"
let g:WhichKeyDesc_ft = "<Space>ft Terminal"
let g:WhichKeyDesc_fT = "<Space>fT Terminal (cwd)"

let g:WhichKeyDesc_g = "<Space>g Git"
let g:WhichKeyDesc_gb = "<Space>gb Branches"
let g:WhichKeyDesc_gc = "<Space>gc Commit"
let g:WhichKeyDesc_gC = "<Space>gC Checkin Project"
let g:WhichKeyDesc_gd = "<Space>gd Diff"
let g:WhichKeyDesc_gD = "<Space>gD Diff Selected"
let g:WhichKeyDesc_ge = "<Space>ge Explorer"
let g:WhichKeyDesc_gf = "<Space>gf File History"
let g:WhichKeyDesc_gF = "<Space>gF Fetch"
let g:WhichKeyDesc_gg = "<Space>gg Context Menu"
let g:WhichKeyDesc_gl = "<Space>gl Log"
let g:WhichKeyDesc_go = "<Space>go Checkout"
let g:WhichKeyDesc_PP = "<Space>gp Push"
let g:WhichKeyDesc_gp = "<Space>gP Pull"
let g:WhichKeyDesc_gq = "<Space>gq Hide Active Window"
let g:WhichKeyDesc_gs = "<Space>gs Status"
let g:WhichKeyDesc_gw = "<Space>gw Commit Window"

let g:WhichKeyDesc_h = "<Space>h Hide"
let g:WhichKeyDesc_ha = "<Space>ha Hide All Windows"

let g:WhichKeyDesc_i = "<Space>i"
let g:WhichKeyDesc_in = "<Space>in Inline"

let g:WhichKeyDesc_l = "<Space>l Lazy"
let g:WhichKeyDesc_L = "<Space>L Changelog"

let g:WhichKeyDesc_m = "<Space>m Move/Method"
let g:WhichKeyDesc_mf = "<Space>mf File Structure"
let g:WhichKeyDesc_mn = "<Space>mn Next Method"
let g:WhichKeyDesc_mp = "<Space>mp Prev Method"

let g:WhichKeyDesc_o = "<Space>o"
let g:WhichKeyDesc_oi = "<Space>oi Optimize Imports"

let g:WhichKeyDesc_p = "<Space>p Project/Paste"
let g:WhichKeyDesc_pe = "<Space>pe Select in Project"
let g:WhichKeyDesc_pv = "<Space>pv Select in Project"

let g:WhichKeyDesc_q = "<Space>q Quit"
let g:WhichKeyDesc_qq = "<Space>qq Quit All"

let g:WhichKeyDesc_s = "<Space>s Search"
let g:WhichKeyDesc_s_quote = '<Space>s" Registers'
let g:WhichKeyDesc_sa = "<Space>sa Auto Commands"
let g:WhichKeyDesc_sb = "<Space>sb Buffers"
let g:WhichKeyDesc_sc = "<Space>sc History"
let g:WhichKeyDesc_sC = "<Space>sC Commands"
let g:WhichKeyDesc_sd = "<Space>sd Doc Diagnostics"
let g:WhichKeyDesc_sD = "<Space>sD Workspace Diagnostics"
let g:WhichKeyDesc_sg = "<Space>sg Grep"
let g:WhichKeyDesc_sG = "<Space>sG Grep (cwd)"
let g:WhichKeyDesc_sh = "<Space>sh Help"
let g:WhichKeyDesc_sH = "<Space>sH Highlight Selection"
let g:WhichKeyDesc_sj = "<Space>sj Jumplist"
let g:WhichKeyDesc_sk = "<Space>sk Keymaps"
let g:WhichKeyDesc_sl = "<Space>sl Location List"
let g:WhichKeyDesc_sm = "<Space>sm Marks"
let g:WhichKeyDesc_sM = "<Space>sM Man Pages"
let g:WhichKeyDesc_snd = "<Space>snd Notifications"
let g:WhichKeyDesc_so = "<Space>so Options"
let g:WhichKeyDesc_sq = "<Space>sq Quickfix"
let g:WhichKeyDesc_sR = "<Space>sR Resume"
let g:WhichKeyDesc_ss = "<Space>ss Symbols"
let g:WhichKeyDesc_st = "<Space>st TODO"
let g:WhichKeyDesc_sT = "<Space>sT TODO/FIXME"
let g:WhichKeyDesc_sw = "<Space>sw Word"

let g:WhichKeyDesc_t = "<Space>t Test"
let g:WhichKeyDesc_td = "<Space>td Debug Nearest"
let g:WhichKeyDesc_tl = "<Space>tl Run Last"
let g:WhichKeyDesc_tO = "<Space>tO Toggle Output"
let g:WhichKeyDesc_tr = "<Space>tr Run Nearest"
let g:WhichKeyDesc_ts = "<Space>ts Summary"
let g:WhichKeyDesc_tS = "<Space>tS Stop"
let g:WhichKeyDesc_tt = "<Space>tt Run File"
let g:WhichKeyDesc_tT = "<Space>tT Run All"
let g:WhichKeyDesc_tw = "<Space>tw Watch"

let g:WhichKeyDesc_u = "<Space>u UI/Util"
let g:WhichKeyDesc_ub = "<Space>ub Toggle Background"
let g:WhichKeyDesc_uC = "<Space>uC Colorscheme"
let g:WhichKeyDesc_ud = "<Space>ud Toggle Diagnostics"
let g:WhichKeyDesc_uh = "<Space>uh Toggle Inlay Hints"
let g:WhichKeyDesc_ui = "<Space>ui Inspect"
let g:WhichKeyDesc_uI = "<Space>uI Inspect Tree"
let g:WhichKeyDesc_ul = "<Space>ul Toggle Line Numbers"
let g:WhichKeyDesc_uL = "<Space>uL Toggle Relative Numbers"
let g:WhichKeyDesc_un = "<Space>un Notifications"
let g:WhichKeyDesc_ur = "<Space>ur Clear Highlight"
let g:WhichKeyDesc_us = "<Space>us Toggle Spelling"
let g:WhichKeyDesc_uw = "<Space>uw Toggle Wrap"

let g:WhichKeyDesc_v = "<Space>v Vim"
let g:WhichKeyDesc_vt = "<Space>vt Test Leader"
let g:WhichKeyDesc_vv = "<Space>vv Reload vimrc"

let g:WhichKeyDesc_w = "<Space>w Window"
let g:WhichKeyDesc_we = "<Space>we Edit in New Window"
let g:WhichKeyDesc_wh = "<Space>wh Split Horizontal"
let g:WhichKeyDesc_wm = "<Space>wm Toggle Maximize"
let g:WhichKeyDesc_wp = "<Space>wp Move to Opposite"
let g:WhichKeyDesc_wv = "<Space>wv Split Vertical"
let g:WhichKeyDesc_ww = "<Space>ww Unsplit"

let g:WhichKeyDesc_y = "<Space>y Yank"
let g:WhichKeyDesc_ya = "<Space>ya Yank All"
let g:WhichKeyDesc_yp = "<Space>yp Yank block"
let g:WhichKeyDesc_yf = "<Space>yf Yank function"
let g:WhichKeyDesc_df = "<Space>df delete function"
let g:WhichKeyDesc_equal = "= format function"

let g:WhichKeyDesc_x = "<Space>x Diagnostics"
let g:WhichKeyDesc_xl = "<Space>xl Location List"
let g:WhichKeyDesc_xq = "<Space>xq Quickfix"

let g:WhichKeyDesc_percent = "<Space>% Select Matching"
let g:WhichKeyDesc_minus = "<Space>- Split"
let g:WhichKeyDesc_backslash = "<Space>\ VSplit"

" Which-Key: z-Prefix (Folding)
"let g:WhichKeyDesc_z  = "z Folding"
"let g:WhichKeyDesc_zc = "Fold close (zc)"
"let g:WhichKeyDesc_zo = "Fold open (zo)"
"let g:WhichKeyDesc_za = "Fold toggle (za)"
"let g:WhichKeyDesc_zM = "Fold ALL close (zM)"
"let g:WhichKeyDesc_zR = "Fold ALL open (zR)"
"let g:WhichKeyDesc_zC = "Fold recursive close (zC)"
"let g:WhichKeyDesc_zO = "Fold recursive open (zO)"
"let g:WhichKeyDesc_zv = "Reveal cursor fold (zv)"

" Nur als Cheat-Sheet unter <leader>z anzeigen
let g:WhichKeyDesc_z_leader = "<Space>z Folding"
let g:WhichKeyDesc_zc_leader = "<Space>zc Fold close"
let g:WhichKeyDesc_zo_leader = "<Space>zo Fold open"
let g:WhichKeyDesc_za_leader = "<Space>za Fold toggle"
let g:WhichKeyDesc_zM_leader = "<Space>zM Fold ALL close"
let g:WhichKeyDesc_zR_leader = "<Space>zR Fold ALL open"
